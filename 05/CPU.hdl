// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //set default c's for A instructions (can be done more efficiently with And)
    And(a=instruction[15], b=true, out=instrType);
    Mux(a=true, b=instruction[5], sel=instrType, out=d1);
    Mux(a=false, b=instruction[4], sel=instrType, out=d2);
    Mux(a=false, b=instruction[2], sel=instrType, out=j1);
    Mux(a=false, b=instruction[1], sel=instrType, out=j2);
    Mux(a=false, b=instruction[0], sel=instrType, out=j3);
    Mux(a=false, b=instruction[3], sel=instrType, out=wm);


    //instruction goes to AReg if it's A-instr (first bit)
    Mux16(a=instruction, b=outMb, sel=instrType, out=Ain);

    //saves to A based on d1
    ARegister(in=Ain, load=d1 , out=Aout, out[0..14]=addressM);

    //whether to operate on A or M, based on a
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);

    //get DReg output
    DRegister(in=outMc, load=d2, out=Dout);

    //ALU calculation
    ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], zy=instruction[9],
     ny=instruction[8] , f=instruction[7], no=instruction[6] ,zr=zr ,ng=ng , out=outM, out=outMb, out=outMc);

    //PC
    And(a=j1, b=ng, out=j1a);
    And(a=j2, b=zr, out=j2a);
    Not(in=ng, out=notNG);
    Not(in=zr, out=notZR);
    And(a=notNG, b=notZR, out=gt);
    And(a=j3, b=gt, out=j3a);
    Or(a=j1a, b=j2a, out=or12);
    Or(a=or12, b=j3a, out=or123);
    PC(in=Aout ,load=or123,inc=true ,reset=reset ,out[0..14]=pc);

    //writeM
    And(a=wm, b=true, out=writeM);
}